name: CI
env:
  TZ: Asia/Shanghai

on:
  push:
    paths-ignore:
      - '**/README.md'
      - '.github/workflows/*'
      - '!.github/workflows/main.yml'
  pull_request:
    paths-ignore:
      - '**/README.md'
      - '.github/workflows/*'
      - '!.github/workflows/main.yml'

jobs:
  build:

    runs-on: ubuntu-latest

    steps:
      - uses: actions/checkout@v2
      - name: init custom env
        run: |
          set -a
          BUILD_NAME="${GITHUB_REPOSITORY#*/}"
          if [[ ${GITHUB_REF} == refs/tags* ]]
          then
              CREATE_RELEASE="true"
              BUILD_VERSION=${GITHUB_REF#refs/tags/}
              RELEASE_BODY=$(./latest-changelog.sh $BUILD_VERSION |sed '1s/[，,]$//;1s/^\(.*\)$/### \1\n/')
              if [[ -z "$RELEASE_BODY" ]]
              then
                  RELEASE_BODY='### ${{ github.event.head_commit.message }}'
                  TG_CHANGELOG="$(echo "$RELEASE_BODY"|sed -n "s/### \(.*\)/\1/p" |sed -n '{;=;p}' | sed "N;s/\n/. /g")"
              else
                  TG_CHANGELOG=$(./latest-changelog.sh $BUILD_VERSION |sed -n '{;=;p}' | sed "N;s/\n/. /g")
              fi
          elif [[ ${GITHUB_REF} == refs/pull* ]]
          then
              CREATE_RELEASE="false"
              num=${GITHUB_REF#refs/pull/}
              num=${num%/merge}
              BUILD_VERSION=pr-${num}-"$(date +'%Y%m%d%H%M%S')"
          else
              if [ "${GITHUB_REF}" == "refs/heads/dev" ]
              then
                  CREATE_RELEASE="true"
              else
                  CREATE_RELEASE="false"
              fi
              echo PRE_RELEASE="true" >> .custom_env
              BUILD_VERSION="$(./latest-version.sh)-$(date +'%Y%m%d%H%M%S')"
              RELEASE_BODY=$(echo '${{ toJson(github.event.commits) }}' |jq -r 'map("### "+.message)|join("\n\n------\n")')
              TG_CHANGELOG="$(echo "$RELEASE_BODY"|sed -n "s/### \(.*\)/\1/p" |sed -n '{;=;p}' | sed "N;s/\n/. /g")"
              VERSION_PREFIX='内测版-'
          fi
          BUILD_NAME_WITH_VERSION="$BUILD_NAME-$BUILD_VERSION"
          echo BUILD_NAME="$BUILD_NAME" >> .custom_env
          echo BUILD_VERSION="$BUILD_VERSION" >> .custom_env
          echo BUILD_NAME_WITH_VERSION="$BUILD_NAME_WITH_VERSION" >> .custom_env
          echo CREATE_RELEASE="$CREATE_RELEASE" >> .custom_env
          if test -n "$RELEASE_BODY"
          then
              echo 'RELEASE_BODY<<EOF' >> .custom_env
              echo "$RELEASE_BODY" >> .custom_env
              echo 'EOF' >> .custom_env
              echo 'UPDATE_BODY<<EOF' >> .custom_env
              envsubst < template-update.md >> .custom_env
              echo >> .custom_env
              echo 'EOF' >> .custom_env
          fi
          if [[ "$CREATE_RELEASE" == "true" && -n "${{ secrets.TELEGRAM_TO }}" && -n "${{ secrets.TELEGRAM_TOKEN }}" ]]
          then
              echo SEND_TELEGRAM="true" >> .custom_env
          fi
          cat .custom_env
          cat .custom_env >> $GITHUB_ENV
      - name: prepare signing key
        env:
          SIGNING_KEY: ${{ secrets.SIGNING_KEY }}
        if: ${{ env.SIGNING_KEY != '' }}
        run: |
          echo "${{ secrets.SIGNING_KEY }}" |base64 -d > demo.jks
          echo storeFile=demo.jks > signing.properties
          echo storePassword=${{ secrets.KEY_STORE_PASSWORD }} >> signing.properties
          echo keyAlias=${{ secrets.ALIAS }} >> signing.properties
          echo keyPassword=${{ secrets.KEY_PASSWORD }} >> signing.properties
      - name: Build with Gradle
        run: |
          ./gradlew assembleRelease
          find ./app/build/outputs/
          find ./app/build/outputs -name '*.apk' -exec mv {} $BUILD_NAME_WITH_VERSION.apk \;
          find ./app/build/outputs -name 'mapping.txt' -exec mv {} $BUILD_NAME_WITH_VERSION-mapping.txt \;
      - name: Upload APK
        uses: actions/upload-artifact@master
        with:
          name: android-build
          path: ${{ env.BUILD_NAME_WITH_VERSION }}.apk
      - name: create release
        if: ${{ env.CREATE_RELEASE == 'true' }}
        id: create_release
        uses: actions/create-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: ${{ env.BUILD_VERSION }}
          release_name: ${{ env.BUILD_VERSION }}
          body: ${{ env.RELEASE_BODY }}
          draft: true
          prerelease: ${{ env.PRE_RELEASE == 'true' }}
      - name: Upload Release Asset android
        if: ${{ env.CREATE_RELEASE == 'true' }}
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ steps.create_release.outputs.upload_url }}
          asset_path: ${{ env.BUILD_NAME_WITH_VERSION }}.apk
          asset_name: ${{ env.BUILD_NAME_WITH_VERSION }}.apk
          asset_content_type: application/zip
      - name: Upload android mapping
        if: ${{ env.CREATE_RELEASE == 'true' }}
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ steps.create_release.outputs.upload_url }}
          asset_path: ${{ env.BUILD_NAME_WITH_VERSION }}-mapping.txt
          asset_name: ${{ env.BUILD_NAME_WITH_VERSION }}-mapping.txt
          asset_content_type: text/plain
      - name: public release
        if: ${{ env.CREATE_RELEASE == 'true' }}
        uses: eregon/publish-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          release_id: ${{ steps.create_release.outputs.id }}
      - name: Send commit to telegram
        if: ${{ env.SEND_TELEGRAM == 'true' }}
        uses: appleboy/telegram-action@master
        with:
          to: ${{ secrets.TELEGRAM_TO }}
          token: ${{ secrets.TELEGRAM_TOKEN }}
          format: markdown
          disable_web_page_preview: true
          message: ${{ env.UPDATE_BODY }}
          document: ${{ env.BUILD_NAME_WITH_VERSION }}.apk

